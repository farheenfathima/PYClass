
# coding: utf-8

# In[1]:

a_list = [3,5,6,12]
a_list[0]


# In[2]:

a_list = [3,5,6,12]
a_list[3]


# In[4]:

a_list[1:3] #remember it doesn't include the last number. remember as [)


# In[5]:

a_list[1:4]


# In[6]:

a_list[0:4]


# In[7]:

a_list = a_list**2


# In[12]:

#squaring using list comprehension
a_list = [3,5,6,12]
squared = [x**2 for x in a_list]
print (squared)


# In[25]:

#squaring using functions
a_list = [3,5,6,12]
def square(a_list):
    for i in a_list: 
        return i**2
square(a_list) #doesn't return a list, why? How to return a list?


# In[32]:

#squaring using map: define a function, use lambda operator in combination with map function
'''map function has two arguments, 1st is name of function and 
2nd is sequence, a list here. map applies the function to all elements
and returns a new list with elements changed by function'''
a_list = [3,5,6,12]
def square(a_list):
    return map(lambda x: x**2, a_list)
square(a_list) #working fine in pytutor, but returning location instead


# In[44]:

a_list = [3,5,6,12]
[False if x%2 else True for x in a_list]


# In[ ]:

